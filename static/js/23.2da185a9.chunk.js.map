{"version":3,"sources":["services/httpService.js","config/config.js","views/order-management/Orders-List.js"],"names":["Apiurl","process","REACT_APP_STAGE","apiUrl","aadharTestRequest","aadharLiveRequest","aadharOtpVerifyRequest","headers","HttpService","register","data","axios","post","vendorLogin","vendorForgotPassword","setNewPassword","getVendorProfileDetail","get","vendorProfileUpdate","put","getAllShippingOrderData","getshippingOrderViewDetails","orderid","checkPinCodes","pincode","createShippingOrder","orderData","cloneShippingOrder","orderId","cancelShippingOrder","updateShippingOrder","OrderLists","navigate","useNavigate","useState","setOrderData","dupOrderData","setDupOrderData","dupShipOrderData","setShipDupOrderData","qtyValue","setQtyValue","selected","setSelected","csvData","setCsvData","buttonRef","useRef","useEffect","getShippingOrderList","a","result","orderDataList","prodTotal","forEach","ele","prodNames","totalPayment","orderProducts","push","product","quantity","Number","amount","reduce","b","channel","date","moment","createdAt","format","join","payment","method","orderType","customer","shippingAddress","firstName","lastName","zipcode","weight","weightFd","ivrStatus","ivr_status","tags","status","_id","getStatusAvailableQuantity","console","error","notifier","type","message","autoDismissTimeout","qtyValues","all","length","booked","filter","ship","pendingpickup","intransit","outfordelivery","Delivered","Cancelled","filterOrder","filterOption","isShowing","setIsShowing","scroll","setScroll","selectedOrderId","setSelectedOrderId","pickUpWarehouseAddress","id","name","isDefault","pickUpRTOWarehouseAddress","wareHousePickupAddress","rtoWareHouseAddress","essentialItem","dangerousGood","courierPartner","shipProcessForm","setShipProcessForm","checkDefaultAddress","getDefaultPickUPAddr","getDefaultRTOAddr","courierPartners","checkedCheckBox","e","target","checked","title","sx","width","style","marginBottom","float","variant","onClick","setTimeout","current","link","click","err","key","label","filename","ref","window","location","reload","log","align","indeterminate","onChange","event","newSelecteds","map","n","inputProps","row","index","isItemSelected","indexOf","labelId","selectedIndex","newSelected","concat","slice","handleClick","role","tabIndex","component","scope","color","open","onClose","fontSize","dividers","display","marginTop","item","xs","marginRight","select","value","fullWidth","size","margin","i","control","disabled","total","finalShipData","obj","consignments","customer_code","reference_number","service_type_id","load_type","description","cod_favor_of","cod_collection_mode","consignment_type","dimension_unit","dimension1","dimension2","height","dimension3","weight_unit","declared_value","cod_amount","num_pieces","commodity_id","customer_reference_number","customOrderId","is_risk_surcharge_applicable","origin_details","phone","phoneno","alternate_phone","address_line_1","address","address_line_2","addressOptional","city","state","destination_details","billingAddress","bfirstName","blastName","bphoneno","baddress","baddressOptional","bpincode","bcity","bstate","pieces_detail","requestOptions","body","JSON","stringify","fetch","then","response","json"],"mappings":"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","file":"static/js/23.2da185a9.chunk.js","sourcesContent":["import axios from 'axios';\nimport Config from '../config/config';\n\nconst Apiurl = Config.apiUrl;\nconst headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n};\nconst HttpService = {\n    register(data) {\n        return axios.post(`${Apiurl}vendorLogReg/signup`, data);\n    },\n    vendorLogin(data) {\n        return axios.post(`${Apiurl}vendorLogReg/login`, data);\n    },\n    vendorForgotPassword(data) {\n        return axios.post(`${Apiurl}vendorLogReg/forgot-password`, data);\n    },\n    setNewPassword(data) {\n        return axios.post(`${Apiurl}vendorLogReg/set-password`, data);\n    },\n    getVendorProfileDetail() {\n        return axios.get(`${Apiurl}vendorLogReg/loggedVendor`);\n    },\n    vendorProfileUpdate(data) {\n        return axios.put(`${Apiurl}vendors/editVendorProfile`, data);\n    },\n    getAllShippingOrderData() {\n        return axios.get(`${Apiurl}shippingOrders/all`);\n    },\n    getshippingOrderViewDetails(orderid) {\n        return axios.get(`${Apiurl}shippingOrders/getShippingOrderById/${orderid}`);\n    },\n    checkPinCodes(pincode) {\n        return axios.get(`https://api.postalpincode.in/pincode/${pincode}`, { headers });\n    },\n    createShippingOrder(orderData) {\n        return axios.post(`${Apiurl}shippingOrders/new`, orderData);\n    },\n    cloneShippingOrder(orderId) {\n        return axios.put(`${Apiurl}shippingOrders/cloneShippingOrder/${orderId}`);\n    },\n    cancelShippingOrder(orderId) {\n        return axios.put(`${Apiurl}shippingOrders/cancelShippingOrder/${orderId}`);\n    },\n    updateShippingOrder(orderId, orderData) {\n        return axios.put(`${Apiurl}shippingOrders/editShippingOrder/${orderId}`, orderData);\n    }\n};\n\nexport default HttpService;\n","const dev = {\n    apiUrl: 'http://3.109.60.131:3007/api/',\n    aadharTestRequest: 'https://test.zoop.one/in/identity/okyc/otp/request',\n    aadharLiveRequest: 'https://live.zoop.one/in/identity/okyc/otp/request',\n    aadharOtpVerifyRequest: 'https://test.zoop.one/in/identity/okyc/otp/verify'\n};\n\nconst test = {\n    apiUrl: 'http://3.109.60.131:3007/api/',\n    aadharTestRequest: 'https://test.zoop.one/in/identity/okyc/otp/request',\n    aadharLiveRequest: 'https://live.zoop.one/in/identity/okyc/otp/request',\n    aadharOtpVerifyRequest: 'https://test.zoop.one/in/identity/okyc/otp/verify'\n};\n\nconst prod = {\n    apiUrl: 'http://3.109.60.131:3007/api/'\n};\n\n// const config = process.env.REACT_APP_STAGE === 'test' ? test : dev;\n\n// eslint-disable-next-line no-nested-ternary\nconst config = process.env.REACT_APP_STAGE === 'production' ? prod : process.env.REACT_APP_STAGE === 'test' ? test : dev;\nexport default config;\n","import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport {\n    Table,\n    TableContainer,\n    TableRow,\n    TableHead,\n    TableCell,\n    Checkbox,\n    TableBody,\n    ButtonGroup,\n    Chip,\n    Grid,\n    Typography,\n    TextField,\n    MenuItem,\n    FormControlLabel,\n    Radio,\n    RadioGroup\n} from '@mui/material';\nimport HttpService from 'services/httpService';\nimport moment from 'moment';\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport { CSVLink } from 'react-csv';\nimport { notifier } from 'react-toast-notifier';\n// import CreatePlaceShipModal from './shipping-modal';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst OrderLists = () => {\n    const navigate = useNavigate();\n    const [orderData, setOrderData] = useState([]);\n    const [dupOrderData, setDupOrderData] = useState([]);\n    const [dupShipOrderData, setShipDupOrderData] = useState([]);\n    const [qtyValue, setQtyValue] = useState([]);\n    const [selected, setSelected] = useState([]);\n    const [csvData, setCsvData] = useState([]);\n    const buttonRef = useRef(null);\n\n    useEffect(() => {\n        // eslint-disable-next-line no-use-before-define\n        getShippingOrderList();\n        // eslint-disable-next-line\n    }, []);\n\n    const getShippingOrderList = async () => {\n        try {\n            const result = await HttpService.getAllShippingOrderData();\n            const orderDataList = [];\n            const prodTotal = [];\n            setShipDupOrderData(result.data);\n            result.data.forEach((ele) => {\n                const prodNames = [];\n                let totalPayment = 0;\n                ele.orderProducts.forEach((ele) => {\n                    prodNames.push(ele.product);\n                    prodTotal.push(ele.quantity * Number(ele.amount));\n                    totalPayment = prodTotal.reduce((a, b) => a + b, 0);\n                });\n                orderDataList.push({\n                    channel: ele?.channel ? ele?.channel : 'custom',\n                    orderId: ele?.orderId,\n                    date: moment(ele?.createdAt).format('MMM D, YYYY'),\n                    product: prodNames.join(', '),\n                    payment: totalPayment,\n                    method: ele?.orderType,\n                    customer: ele?.shippingAddress\n                        ? ele?.shippingAddress?.firstName + ele?.shippingAddress?.lastName\n                        : ele?.shippingAddress?.firstName + ele?.shippingAddress?.lastName,\n                    zipcode: ele?.shippingAddress ? ele?.shippingAddress?.pincode : ele?.shippingAddress?.pincode,\n                    weight: ele?.weightFd,\n                    ivrStatus: ele?.ivr_status,\n                    tags: ele?.tags,\n                    status: ele?.status,\n                    // eslint-disable-next-line no-underscore-dangle\n                    _id: ele?._id\n                });\n            });\n            setOrderData(orderDataList);\n            setDupOrderData(orderDataList);\n            setCsvData(orderDataList);\n            // eslint-disable-next-line no-use-before-define\n            getStatusAvailableQuantity(orderDataList);\n        } catch (error) {\n            console.error(error);\n            notifier({\n                type: 'error',\n                message: error.error,\n                autoDismissTimeout: 5000\n            });\n        }\n    };\n\n    const getStatusAvailableQuantity = (data) => {\n        const qtyValues = [];\n        qtyValues.all = data.length;\n        qtyValues.booked = data.filter((ele) => ele.status === 'Booked').length;\n        qtyValues.ship = data.filter((ele) => ele.status === 'Ship').length;\n        qtyValues.pendingpickup = data.filter((ele) => ele.status === 'pendingpickup').length;\n        qtyValues.intransit = data.filter((ele) => ele.status === 'intransit').length;\n        qtyValues.outfordelivery = data.filter((ele) => ele.status === 'outfordelivery').length;\n        qtyValues.Delivered = data.filter((ele) => ele.status === 'Delivered').length;\n        qtyValues.Cancelled = data.filter((ele) => ele.status === 'Cancelled').length;\n        setQtyValue(qtyValues);\n    };\n\n    const headers = [\n        { key: 'channel', label: 'Chaneel' },\n        { key: 'orderId', label: 'Order Id' },\n        { key: 'product', label: 'Product Name' },\n        { key: 'customer', label: 'Customer' },\n        { key: 'zipcode', label: 'Zip Code' },\n        { key: 'weight', label: 'Weight' },\n        { key: 'payment', label: 'Payment Amount' },\n        { key: 'method', label: 'Method' },\n        { key: 'date', label: 'Date' },\n        { key: 'status', label: 'Status' }\n    ];\n\n    const exportOrder = () => {\n        try {\n            setTimeout(() => {\n                buttonRef.current.link.click();\n                notifier({\n                    type: 'success',\n                    message: 'File Download Successfully',\n                    autoDismissTimeout: 5000\n                });\n            });\n        } catch (err) {\n            console.error(err.message);\n            notifier({\n                type: 'error',\n                message: 'Something went wrong!',\n                autoDismissTimeout: 5000\n            });\n        }\n    };\n\n    const refreshPage = () => {\n        window.location.reload();\n    };\n\n    const importOrder = () => {\n        console.log('Import Order Data');\n    };\n\n    const createOrder = () => {\n        navigate('/create-order');\n    };\n\n    const filterOrder = (filterOption) => {\n        if (filterOption === 'all') {\n            setOrderData(dupOrderData);\n            setCsvData(dupOrderData);\n        } else {\n            setOrderData(dupOrderData.filter((ele) => ele.status === filterOption));\n            setCsvData(dupOrderData.filter((ele) => ele.status === filterOption));\n        }\n    };\n\n    const onSelectAllClick = (event) => {\n        if (event.target.checked) {\n            // eslint-disable-next-line no-underscore-dangle\n            const newSelecteds = orderData.map((n) => n._id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const chageRouteToOrderView = (orderId) => {\n        navigate(`/order-details/${orderId}`);\n    };\n\n    const [isShowing, setIsShowing] = useState(false);\n    const [scroll, setScroll] = useState('paper');\n    const [selectedOrderId, setSelectedOrderId] = useState('');\n\n    const pickUpWarehouseAddress = [\n        { id: '1', name: 'Nayan Patil', isDefault: true },\n        { id: '2', name: 'Nitin Patil', isDefault: false }\n    ];\n\n    const pickUpRTOWarehouseAddress = [\n        { id: '1', name: 'Nayan Patil', isDefault: true },\n        { id: '2', name: 'Nitin Patil', isDefault: false }\n    ];\n\n    const [shipProcessForm, setShipProcessForm] = useState({\n        orderId: '',\n        wareHousePickupAddress: '',\n        rtoWareHouseAddress: '',\n        essentialItem: false,\n        dangerousGood: false,\n        courierPartner: ''\n    });\n    const { wareHousePickupAddress, rtoWareHouseAddress, essentialItem, dangerousGood, courierPartner } = shipProcessForm;\n    const handleShipOrderProcess = (data, orderId) => {\n        setSelectedOrderId(orderId);\n        setIsShowing(true);\n        setScroll('paper');\n        // eslint-disable-next-line no-use-before-define\n        checkDefaultAddress();\n        // Need to be added below function\n        // TO get Addresses for pickup warehouse and RTO, Courier parnters\n    };\n\n    const checkDefaultAddress = () => {\n        const getDefaultPickUPAddr = pickUpWarehouseAddress.filter((ele) => ele.isDefault === true);\n        const getDefaultRTOAddr = pickUpRTOWarehouseAddress.filter((ele) => ele.isDefault === true);\n        setShipProcessForm({\n            ...shipProcessForm,\n            wareHousePickupAddress: getDefaultPickUPAddr[0].id,\n            rtoWareHouseAddress: getDefaultRTOAddr[0].id\n        });\n    };\n\n    const courierPartners = [\n        { id: '1', name: 'DTDC Air (₹117)' },\n        { id: '2', name: 'DTDC Premium (₹108.2)' },\n        { id: '3', name: 'Xpressbees Surface (₹108.74)' },\n        { id: '4', name: 'Xpressbees 1 K.G (₹131)' }\n    ];\n\n    const checkedCheckBox = (e) => {\n        if (e.target.checked && e.target.name === 'essentialItem') {\n            setShipProcessForm({ ...shipProcessForm, [e.target.name]: true });\n        }\n        if (e.target.checked && e.target.name === 'dangerousGood') {\n            setShipProcessForm({ ...shipProcessForm, [e.target.name]: true });\n        }\n    };\n\n    const shipOrder = () => {\n        shipProcessForm.orderId = selectedOrderId;\n        let total = 0;\n        const prodTotal = [];\n        console.log(shipProcessForm.courierPartner, 'shipProcessFormdddd');\n        // eslint-disable-next-line no-underscore-dangle\n        const finalShipData = dupShipOrderData.filter((ele) => ele._id === selectedOrderId);\n        finalShipData[0].orderProducts.forEach((ele) => {\n            prodTotal.push(ele.quantity * Number(ele.amount));\n            total = prodTotal.reduce((a, b) => a + b, 0);\n        });\n        const obj = {\n            consignments: [\n                {\n                    customer_code: 'GL112',\n                    reference_number: finalShipData[0].orderId,\n                    service_type_id: 'GROUND EXPRESS',\n                    load_type: 'NON-DOCUMENT',\n                    description: 'sample',\n                    cod_favor_of: 'In Favour of',\n                    cod_collection_mode: 'cash',\n                    consignment_type: 'Forward',\n                    dimension_unit: 'cm',\n                    length: finalShipData[0].dimension1,\n                    width: finalShipData[0].dimension2,\n                    height: finalShipData[0].dimension3,\n                    weight_unit: 'kg',\n                    weight: finalShipData[0].weightFd / 1000,\n                    declared_value: '2299',\n                    cod_amount: total,\n                    num_pieces: finalShipData[0].orderProducts.length,\n                    commodity_id: 'Others',\n                    customer_reference_number: finalShipData[0].customOrderId,\n                    is_risk_surcharge_applicable: false,\n                    origin_details: {\n                        name: finalShipData[0].shippingAddress.firstName + finalShipData[0].shippingAddress.lastName,\n                        phone: finalShipData[0].shippingAddress.phoneno,\n                        alternate_phone: finalShipData[0].shippingAddress.phoneno,\n                        address_line_1: finalShipData[0].shippingAddress.address,\n                        address_line_2: finalShipData[0].shippingAddress.addressOptional,\n                        pincode: finalShipData[0].shippingAddress.pincode,\n                        city: finalShipData[0].shippingAddress.city,\n                        state: finalShipData[0].shippingAddress.state\n                    },\n                    destination_details: {\n                        name: finalShipData[0].billingAddress.bfirstName + finalShipData[0].billingAddress.blastName,\n                        phone: finalShipData[0].billingAddress.bphoneno,\n                        alternate_phone: finalShipData[0].billingAddress.bphoneno,\n                        address_line_1: finalShipData[0].billingAddress.baddress,\n                        address_line_2: finalShipData[0].billingAddress.baddressOptional,\n                        pincode: finalShipData[0].billingAddress.bpincode,\n                        city: finalShipData[0].billingAddress.bcity,\n                        state: finalShipData[0].billingAddress.bstate\n                    },\n                    pieces_detail: [\n                        {\n                            description: 'WESTERN DIGITAL 1 TB EXTERNAL HDD',\n                            declared_value: '2299',\n                            weight: '0.15',\n                            height: '8',\n                            length: '8',\n                            width: '10'\n                        }\n                    ]\n                }\n            ]\n        };\n        console.log(obj, 'obj');\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'api-key': 'a50283ab7acb25f2301d520a9a589c'\n                },\n                body: JSON.stringify(obj)\n            };\n            fetch(`https://demodashboardapi.shipsy.in/api/customer/integration/consignment/softdata`, requestOptions)\n                .then((response) => response.json())\n                .then((data) => {\n                    console.log(data, 'data');\n                    // On success of this response update the status to book with some updated fields which we get in response\n                });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return (\n        <MainCard title=\"Order Lists\">\n            <Box sx={{ width: '100%' }}>\n                <div style={{ marginBottom: 16, float: 'right' }}>\n                    <Button variant=\"outlined\" onClick={exportOrder}>\n                        <ImportExportIcon /> Export\n                    </Button>\n                    <CSVLink headers={headers} filename=\"shippingOrders.csv\" data={csvData} ref={buttonRef} />\n\n                    <Button variant=\"outlined\" onClick={refreshPage}>\n                        <RefreshIcon /> Refresh\n                    </Button>\n                    <Button variant=\"outlined\" onClick={importOrder}>\n                        <ImportExportIcon /> Import Order\n                    </Button>\n                    <Button variant=\"outlined\" onClick={createOrder}>\n                        <AddCircleOutlineIcon /> Create Order\n                    </Button>\n                </div>\n                <br />\n                <br />\n                <br />\n                <hr />\n                <br />\n                <div style={{ marginBottom: 16 }}>\n                    <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\">\n                        <Button onClick={() => filterOrder('all')}>All Order ({qtyValue.all})</Button>\n                        <Button onClick={() => filterOrder('Ship')}>Not Shipped ({qtyValue.ship})</Button>\n                        <Button onClick={() => filterOrder('Booked')}>Booked ({qtyValue.booked})</Button>\n                        <Button onClick={() => filterOrder('pendingpickup')}>Pending Pickup ({qtyValue.pendingpickup})</Button>\n                        <Button onClick={() => filterOrder('intransit')}>In Transit ({qtyValue.intransit})</Button>\n                        <Button onClick={() => filterOrder('outfordelivery')}>Out For Delivery ({qtyValue.outfordelivery})</Button>\n                        <Button onClick={() => filterOrder('Delivered')}>Delivered ({qtyValue.Delivered})</Button>\n                        <Button onClick={() => filterOrder('Cancelled')}>Cancelled ({qtyValue.Cancelled})</Button>\n                    </ButtonGroup>\n                </div>\n                <TableContainer>\n                    <Table aria-label=\"customized table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">\n                                    <Checkbox\n                                        indeterminate={selected.length > 0 && selected.length < orderData.length}\n                                        checked={orderData.length > 0 && selected.length === orderData.length}\n                                        onChange={onSelectAllClick}\n                                        inputProps={{ 'aria-label': 'select all desserts' }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\">Channel</TableCell>\n                                <TableCell align=\"center\">Order</TableCell>\n                                <TableCell align=\"center\">Date</TableCell>\n                                <TableCell align=\"center\">Product</TableCell>\n                                <TableCell align=\"center\">Payment</TableCell>\n                                <TableCell align=\"center\">Method</TableCell>\n                                <TableCell align=\"center\">Customer</TableCell>\n                                <TableCell align=\"center\">ZIP Code</TableCell>\n                                <TableCell align=\"center\">Weight</TableCell>\n                                <TableCell align=\"center\">Status</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {orderData.map((row, index) => {\n                                // eslint-disable-next-line no-underscore-dangle\n                                const isItemSelected = isSelected(row._id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n                                return (\n                                    <TableRow\n                                        // eslint-disable-next-line no-underscore-dangle\n                                        key={row._id}\n                                        // eslint-disable-next-line no-underscore-dangle\n                                        onClick={() => handleClick(row._id)}\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell align=\"center\">\n                                            {row.status !== 'Cancelled' && row.status !== 'Booked' && (\n                                                <Checkbox checked={isItemSelected} inputProps={{ 'aria-labelledby': labelId }} />\n                                            )}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                                            {row.channel}\n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.orderId ? (\n                                                // eslint-disable-next-line no-underscore-dangle\n                                                <Button onClick={() => chageRouteToOrderView(row._id)}>{row.orderId}</Button>\n                                            ) : (\n                                                `-`\n                                            )}\n                                        </TableCell>\n                                        <TableCell align=\"center\">{row.date}</TableCell>\n                                        <TableCell align=\"center\">{row.product ? row.product : `-`}</TableCell>\n                                        <TableCell align=\"center\">{row.payment}</TableCell>\n                                        <TableCell align=\"center\">{row.method}</TableCell>\n                                        <TableCell align=\"center\">{row.customer}</TableCell>\n                                        <TableCell align=\"center\">{row.zipcode}</TableCell>\n                                        <TableCell align=\"center\">{row.weight}</TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.status === 'Cancelled' ? (\n                                                <Chip label={row.status} color=\"primary\" variant=\"outlined\" />\n                                            ) : (\n                                                <Chip\n                                                    label={row.status}\n                                                    color=\"primary\"\n                                                    variant=\"outlined\"\n                                                    // eslint-disable-next-line no-underscore-dangle\n                                                    onClick={() => handleShipOrderProcess(row, row._id)}\n                                                />\n                                            )}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Box>\n\n            <Box>\n                <Dialog\n                    open={isShowing}\n                    onClose={() => setIsShowing(false)}\n                    scroll={scroll}\n                    aria-labelledby=\"scroll-dialog-title\"\n                    aria-describedby=\"scroll-dialog-description\"\n                >\n                    <DialogTitle id=\"scroll-dialog-title\" style={{ fontSize: '1.5em' }}>\n                        Ship Your Package Now\n                    </DialogTitle>\n                    <DialogContent dividers={scroll === 'paper'}>\n                        <Grid style={{ display: 'flex', marginTop: '5%', marginBottom: '5%', width: 500 }}>\n                            <Grid item xs={6} style={{ marginRight: 20 }}>\n                                <Typography variant=\"h5\">Pickup Warehouse</Typography>\n                                <TextField\n                                    id=\"outlined-select-ordertype\"\n                                    select\n                                    label=\"Pickup Warehouse Address\"\n                                    name=\"wareHousePickupAddress\"\n                                    value={wareHousePickupAddress}\n                                    onChange={(e) => setShipProcessForm({ ...shipProcessForm, [e.target.name]: e.target.value })}\n                                    fullWidth\n                                    size=\"small\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                >\n                                    {pickUpWarehouseAddress?.map((data, i) => (\n                                        <MenuItem value={data.id} key={i + 1}>\n                                            {data.name} {data.isDefault === true ? `(Default)` : ``}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <FormControlLabel\n                                    control={<Checkbox name=\"essentialItem\" checked={essentialItem} onChange={(e) => checkedCheckBox(e)} />}\n                                    label=\"Is essential item ?\"\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"h5\">RTO Warehouse</Typography>\n                                <TextField\n                                    id=\"outlined-select-ordertype\"\n                                    select\n                                    label=\"RTO Warehouse\"\n                                    name=\"rtoWareHouseAddress\"\n                                    value={rtoWareHouseAddress}\n                                    onChange={(e) => setShipProcessForm({ ...shipProcessForm, [e.target.name]: e.target.value })}\n                                    fullWidth\n                                    size=\"small\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                >\n                                    {pickUpRTOWarehouseAddress?.map((data, i) => (\n                                        <MenuItem value={data.id} key={i + 1}>\n                                            {data.name} {data.isDefault === true ? `(Default)` : ``}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <FormControlLabel\n                                    control={<Checkbox name=\"dangerousGood\" checked={dangerousGood} onChange={(e) => checkedCheckBox(e)} />}\n                                    label=\"Is dangerous good ?\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <hr />\n                        <Grid style={{ display: 'flex', marginTop: '5%', marginBottom: '5%', width: 500 }}>\n                            <RadioGroup\n                                row\n                                aria-label=\"courier-partner\"\n                                value={courierPartner}\n                                name=\"courierPartner\"\n                                onChange={(e) => setShipProcessForm({ ...shipProcessForm, [e.target.name]: e.target.value })}\n                            >\n                                {courierPartners?.map((data, i) => (\n                                    <Grid item xs={6} key={i + 1}>\n                                        <FormControlLabel value={data.id} control={<Radio />} label={data.name} />\n                                    </Grid>\n                                ))}\n                            </RadioGroup>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" color=\"error\" onClick={() => setIsShowing(false)}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" disabled={!courierPartner} color=\"primary\" onClick={shipOrder}>\n                            Ship\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Box>\n        </MainCard>\n    );\n};\nexport default OrderLists;\n"],"sourceRoot":""}