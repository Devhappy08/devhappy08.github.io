{"version":3,"sources":["services/httpService.js","config/config.js","views/pages/authentication/AuthWrapper1.js","views/pages/authentication/AuthCardWrapper.js","ui-component/cards/AuthFooter.js","hooks/useScriptRef.js","views/pages/authentication/authentication3/forgot-password.js"],"names":["Apiurl","process","REACT_APP_STAGE","apiUrl","aadharTestRequest","aadharLiveRequest","aadharOtpVerifyRequest","headers","HttpService","register","data","axios","post","vendorLogin","vendorForgotPassword","setNewPassword","getVendorProfileDetail","get","vendorProfileUpdate","put","getAllShippingOrderData","getshippingOrderViewDetails","orderid","checkPinCodes","pincode","createShippingOrder","orderData","cloneShippingOrder","orderId","cancelShippingOrder","updateShippingOrder","AuthWrapper1","styled","backgroundColor","theme","palette","primary","light","minHeight","AuthCardWrapper","children","other","sx","maxWidth","xs","lg","margin","md","flexGrow","flexBasis","content","p","sm","xl","AuthFooter","direction","justifyContent","variant","component","Link","href","target","underline","useScriptRef","scripted","useRef","useEffect","current","ForgotPassword","useTheme","scriptedRef","matchDownSM","useMediaQuery","breakpoints","down","container","item","alignItems","m","mb","spacing","color","secondary","main","gutterBottom","fontSize","textAlign","initialValues","email","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","notifier","type","message","autoDismissTimeout","success","console","error","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","fullWidth","Boolean","typography","customInput","htmlFor","id","value","name","onBlur","onChange","label","inputProps","mt","disableElevation","disabled","size","to","textDecoration"],"mappings":"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","file":"static/js/13.f3c948f5.chunk.js","sourcesContent":["import axios from 'axios';\nimport Config from '../config/config';\n\nconst Apiurl = Config.apiUrl;\nconst headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n};\nconst HttpService = {\n    register(data) {\n        return axios.post(`${Apiurl}vendorLogReg/signup`, data);\n    },\n    vendorLogin(data) {\n        return axios.post(`${Apiurl}vendorLogReg/login`, data);\n    },\n    vendorForgotPassword(data) {\n        return axios.post(`${Apiurl}vendorLogReg/forgot-password`, data);\n    },\n    setNewPassword(data) {\n        return axios.post(`${Apiurl}vendorLogReg/set-password`, data);\n    },\n    getVendorProfileDetail() {\n        return axios.get(`${Apiurl}vendorLogReg/loggedVendor`);\n    },\n    vendorProfileUpdate(data) {\n        return axios.put(`${Apiurl}vendors/editVendorProfile`, data);\n    },\n    getAllShippingOrderData() {\n        return axios.get(`${Apiurl}shippingOrders/all`);\n    },\n    getshippingOrderViewDetails(orderid) {\n        return axios.get(`${Apiurl}shippingOrders/getShippingOrderById/${orderid}`);\n    },\n    checkPinCodes(pincode) {\n        return axios.get(`https://api.postalpincode.in/pincode/${pincode}`, { headers });\n    },\n    createShippingOrder(orderData) {\n        return axios.post(`${Apiurl}shippingOrders/new`, orderData);\n    },\n    cloneShippingOrder(orderId) {\n        return axios.put(`${Apiurl}shippingOrders/cloneShippingOrder/${orderId}`);\n    },\n    cancelShippingOrder(orderId) {\n        return axios.put(`${Apiurl}shippingOrders/cancelShippingOrder/${orderId}`);\n    },\n    updateShippingOrder(orderId, orderData) {\n        return axios.put(`${Apiurl}shippingOrders/editShippingOrder/${orderId}`, orderData);\n    }\n};\n\nexport default HttpService;\n","const dev = {\n    apiUrl: 'http://3.109.60.131:3007/api/',\n    aadharTestRequest: 'https://test.zoop.one/in/identity/okyc/otp/request',\n    aadharLiveRequest: 'https://live.zoop.one/in/identity/okyc/otp/request',\n    aadharOtpVerifyRequest: 'https://test.zoop.one/in/identity/okyc/otp/verify'\n};\n\nconst test = {\n    apiUrl: 'http://3.109.60.131:3007/api/',\n    aadharTestRequest: 'https://test.zoop.one/in/identity/okyc/otp/request',\n    aadharLiveRequest: 'https://live.zoop.one/in/identity/okyc/otp/request',\n    aadharOtpVerifyRequest: 'https://test.zoop.one/in/identity/okyc/otp/verify'\n};\n\nconst prod = {\n    apiUrl: 'http://3.109.60.131:3007/api/'\n};\n\n// const config = process.env.REACT_APP_STAGE === 'test' ? test : dev;\n\n// eslint-disable-next-line no-nested-ternary\nconst config = process.env.REACT_APP_STAGE === 'production' ? prod : process.env.REACT_APP_STAGE === 'test' ? test : dev;\nexport default config;\n","// material-ui\nimport { styled } from '@mui/material/styles';\n\n// ==============================|| AUTHENTICATION 1 WRAPPER ||============================== //\n\nconst AuthWrapper1 = styled('div')(({ theme }) => ({\n    backgroundColor: theme.palette.primary.light,\n    minHeight: '100vh'\n}));\n\nexport default AuthWrapper1;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { Box } from '@mui/material';\n\n// project import\nimport MainCard from 'ui-component/cards/MainCard';\n\n// ==============================|| AUTHENTICATION CARD WRAPPER ||============================== //\n\nconst AuthCardWrapper = ({ children, ...other }) => (\n    <MainCard\n        sx={{\n            maxWidth: { xs: 400, lg: 475 },\n            margin: { xs: 2.5, md: 3 },\n            '& > *': {\n                flexGrow: 1,\n                flexBasis: '50%'\n            }\n        }}\n        content={false}\n        {...other}\n    >\n        <Box sx={{ p: { xs: 2, sm: 3, xl: 5 } }}>{children}</Box>\n    </MainCard>\n);\n\nAuthCardWrapper.propTypes = {\n    children: PropTypes.node\n};\n\nexport default AuthCardWrapper;\n","// material-ui\nimport { Link, Typography, Stack } from '@mui/material';\n\n// ==============================|| FOOTER - AUTHENTICATION 2 & 3 ||============================== //\n\nconst AuthFooter = () => (\n    <Stack direction=\"row\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle2\" component={Link} href=\"\" target=\"_blank\" underline=\"hover\">\n            YSOSY Technology\n        </Typography>\n        <Typography variant=\"subtitle2\" component={Link} href=\"https://devaitecsolutions.com/\" target=\"_blank\" underline=\"hover\">\n            &copy; Devai Tec Solutions\n        </Typography>\n    </Stack>\n);\n\nexport default AuthFooter;\n","import { useEffect, useRef } from 'react';\n\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// project imports\nimport AuthWrapper1 from '../AuthWrapper1';\nimport AuthCardWrapper from '../AuthCardWrapper';\nimport AuthFooter from 'ui-component/cards/AuthFooter';\nimport {\n    Divider,\n    Grid,\n    Stack,\n    Typography,\n    useMediaQuery,\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    OutlinedInput\n} from '@mui/material';\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport HttpService from '../../../../services/httpService';\n// project imports\nimport useScriptRef from 'hooks/useScriptRef';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { notifier } from 'react-toast-notifier';\n// ================================|| AUTH3 - LOGIN ||================================ //\n\nconst ForgotPassword = () => {\n    const theme = useTheme();\n    const scriptedRef = useScriptRef();\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n\n    return (\n        <AuthWrapper1>\n            <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ minHeight: '100vh' }}>\n                <Grid item xs={12}>\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ minHeight: 'calc(100vh - 68px)' }}>\n                        <Grid item sx={{ m: { xs: 1, sm: 3 }, mb: 0 }}>\n                            <AuthCardWrapper>\n                                <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n                                    <Grid item xs={12}>\n                                        <Grid\n                                            container\n                                            direction={matchDownSM ? 'column-reverse' : 'row'}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\"\n                                        >\n                                            <Grid item>\n                                                <Stack alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                                                    <Typography\n                                                        color={theme.palette.secondary.main}\n                                                        gutterBottom\n                                                        variant={matchDownSM ? 'h3' : 'h2'}\n                                                    >\n                                                        Forgot Password\n                                                    </Typography>\n                                                    <Typography\n                                                        variant=\"caption\"\n                                                        fontSize=\"16px\"\n                                                        textAlign={matchDownSM ? 'center' : 'inherit'}\n                                                    >\n                                                        Enter your Registered Email Id\n                                                    </Typography>\n                                                </Stack>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Formik\n                                            initialValues={{\n                                                email: '',\n                                                submit: null\n                                            }}\n                                            validationSchema={Yup.object().shape({\n                                                email: Yup.string().email('Must be a valid email').max(255).required('Email is required')\n                                            })}\n                                            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                                                try {\n                                                    if (scriptedRef.current) {\n                                                        const response = await HttpService.vendorForgotPassword(values);\n                                                        notifier({\n                                                            type: 'success',\n                                                            message: 'Please check email to reset password',\n                                                            autoDismissTimeout: 5000\n                                                        });\n                                                        setStatus({ success: true });\n                                                        setSubmitting(false);\n                                                    }\n                                                } catch (err) {\n                                                    console.error(err);\n                                                    notifier({\n                                                        type: 'error',\n                                                        message: 'Email id is wrong!',\n                                                        autoDismissTimeout: 5000\n                                                    });\n                                                    if (scriptedRef.current) {\n                                                        setStatus({ success: false });\n                                                        setErrors({ submit: err.message });\n                                                        setSubmitting(false);\n                                                    }\n                                                }\n                                            }}\n                                        >\n                                            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                                                <form noValidate onSubmit={handleSubmit}>\n                                                    <FormControl\n                                                        fullWidth\n                                                        error={Boolean(touched.email && errors.email)}\n                                                        sx={{ ...theme.typography.customInput }}\n                                                    >\n                                                        <InputLabel htmlFor=\"outlined-adornment-email-login\">Email Address</InputLabel>\n                                                        <OutlinedInput\n                                                            id=\"outlined-adornment-email-login\"\n                                                            type=\"email\"\n                                                            value={values.email}\n                                                            name=\"email\"\n                                                            onBlur={handleBlur}\n                                                            onChange={handleChange}\n                                                            label=\"Email Address / Username\"\n                                                            inputProps={{}}\n                                                        />\n                                                        {touched.email && errors.email && (\n                                                            <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                                                                {errors.email}\n                                                            </FormHelperText>\n                                                        )}\n                                                    </FormControl>\n\n                                                    <Box sx={{ mt: 2 }}>\n                                                        <AnimateButton>\n                                                            <Button\n                                                                disableElevation\n                                                                disabled={isSubmitting}\n                                                                fullWidth\n                                                                size=\"large\"\n                                                                type=\"submit\"\n                                                                variant=\"contained\"\n                                                                color=\"secondary\"\n                                                            >\n                                                                Send Request\n                                                            </Button>\n                                                        </AnimateButton>\n                                                    </Box>\n                                                </form>\n                                            )}\n                                        </Formik>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Divider />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Grid item container direction=\"column\" alignItems=\"center\" xs={12}>\n                                            <Typography component={Link} to=\"/\" variant=\"subtitle1\" sx={{ textDecoration: 'none' }}>\n                                                Already have an account?\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </AuthCardWrapper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sx={{ m: 3, mt: 1 }}>\n                    <AuthFooter />\n                </Grid>\n            </Grid>\n        </AuthWrapper1>\n    );\n};\n\nexport default ForgotPassword;\n"],"sourceRoot":""}